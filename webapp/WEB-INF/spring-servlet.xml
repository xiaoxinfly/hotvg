<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

	<!-- 自动注册基于注解风格的处理器需要的 DefaultAnnotationHandlerMapping、 AnnotationMethodHandlerAdapter -->
	<mvc:annotation-driven conversion-service="conversionService"
		validator="validator" />
	<!-- 能映射静态资源（当 Spring Web MVC 框架没有处理请求对应的控制器时（如一些静态资源）， 转交给默认的 Servlet 来响应静态 
		文件 -->
	<mvc:default-servlet-handler />

	<context:component-scan base-package="com.ssmdemo.controller" />
	<context:annotation-config /><!-- 这个不是基于注解，而是xml -->


	<!-- <mvc:interceptors> <mvc:interceptor> <mvc:mapping path="/**"/> <bean 
		class="com.base.modukes.intercepter.SecurityIntercepter"></bean> </mvc:interceptor> 
		</mvc:interceptors> -->


	<!-- 配置 JOSN转换器 START -->
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<bean id="stringConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
				<ref bean="stringConverter" />
			</list>
		</property>
	</bean>
	<!-- JOSN转换器 END -->

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>


	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<!-- 自定义转换器 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<!-- 自定义的转换器Bean配置 -->
				<bean class="com.ssmdemo.util.DateConverter" />
			</list>
		</property>
	</bean>

	<!-- 数据校验器 应用高安全需求 context中的类 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器 使用hibernate校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<!-- 不加后缀properties -->
				<value>classpath:validationMessage</value>
			</list>
		</property>
		<!-- 对资源文件进行编码 -->
		<property name="defaultEncoding" value="iso-8859-1" />
		<!-- 资源文件内容缓冲时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>
	<!-- 校验器结束 THE END -->

	<!-- 异常处理器 START -->
	<!-- 异常处理器 <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> 
		定义默认的异常处理页面 这里因为之前就配置了页面的路径，所以这里只要写error就行了，前缀和后缀和自动加 <property name="defaultErrorView" 
		value="error" /> 定义异常处理页面用来获取异常信息的变量名，也可不定义，默认名为exception <property name="exceptionAttribute" 
		value="ex" /> 定义需要特殊处理的异常，这是重要点 <property name="exceptionMappings"> <props> 
		<prop key="com.ssmdemo.exception.SimpleException">error</prop> 还可以定义其他的自定义异常 
		</props> </property> </bean> -->
	<!-- 异常处理器 END -->

	<!-- 拦截器配置 START -->
	<!-- <bean id="" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"> 
		<property name="intercepts"> <list> <ref bean="simpleIntercept" /> </list> 
		</property> </bean> <bean id="simpleIntercept" class="com.ssmdemo.intercept.SimpleIntercept" 
		/> -->
	<!-- 拦截器配置 END -->

	<!-- 全局拦截器配置 START 与上面的不同。上面是针对HandlerMapping进行拦截的。全局用得多 -->
	<mvc:interceptors>
		<!-- 从上到下执行多个拦截器 -->
		<mvc:interceptor>
			<!-- 要拦截的路径请求 -->
			<mvc:mapping path="/goods" />
			<bean class="com.ssmdemo.intercept.SimpleIntercept" />
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 拦截全部的url和子url -->
			<mvc:mapping path="/**" />
			<bean class="com.ssmdemo.intercept.SimpleIntercept2" />
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 拦截全部的url和子url -->
			<mvc:mapping path="/**" />
			<bean class="com.ssmdemo.intercept.SimpleIntercept3" />
		</mvc:interceptor>
	</mvc:interceptors>

</beans>